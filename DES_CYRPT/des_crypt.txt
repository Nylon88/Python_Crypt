～DES暗号とは～

<<<何の略？>>>
    DES == Data Encryption Standard

<<<暗号方式>>>
    共通鍵暗号方式のデータ暗号化の1つ。

<<<いつできたのか？>>>
    アメリカ連邦政府標準が公募によって暗号方式を募集した際、1977年にDESが採用された。

<<<DES暗号の特徴>>>
    ➀ブロック暗号：特定のbit単位毎にデータを区切り、それを暗号化する。
    ⓶DESは64bit単位：64bit == (鍵長56bit)+(パリティチェック8bit)
    ⓷秘密鍵（64bit）を入力して、16個のサブ鍵（1個のサブ鍵は48bit）を生成する。
    ⓸サブ鍵16個と平文mから、暗号文cを生成する。


<<<16個のサブ鍵の生成方法>>>
    ➀秘密鍵(56bit)を作る：DESでは秘密鍵の生成方法は決まっていない(56bitであればおｋ)
    ⓶秘密鍵(56bit)をp1で縮小転置(56bit)
    ⓷縮小転置した秘密鍵(56bit)を、28bit毎に分ける：c,d
    ⓸for文16回以下の⓹～⓻を繰り返して、16個のサブ鍵を生成する。　
        ⓹1,2,9,16回目の時、c,dをそれぞれ1シフトする
        ⓺1,2,9,16回目以外の時は、2シフトする
        ⓻上の操作で得たサブ鍵(56bit)をp2で縮小転置(48bit)する　→　実際に使うサブ鍵(48bit)の完成

<<<平文の暗号化方法>>>
    ・使うもの：サブ鍵（48bit）16個、平文m（64bit）,n=0
    ➀平文mに初期転置IPを適用：m"(64bit) = IP(m)
    ⓶平文m"(64bit)を左右L0, R0（32bit毎）に分割する：L0(32bit), R0(32bit) = m"(64bit)
    nが16になるまで⓷～⓻を繰り返し行う。初期値n=0
        ⓷R(n-1)とサブ鍵(n)をラウンド関数Lで計算：L(R(n-1), サブ鍵(n)) = y(n-1)
        ⓸L(n-1)とy(n-1)を排他的論理和で計算：L(n-1) ⊕　y(n-1) = L(n-1)"
        ⓹R(n-1)をR(n-1)"とする：R(n-1) = R(n-1)"
        ⓺L(n-1)"とR(n-1)"の位置を交換する：L(n-1)",R(n-1)" →　R(n-1)",L(n-1)"
        ⓻nに1を足す：n = n + 1
    ⓼L16とR16を連結させる：LR(64bit) = L16(32bit) + R16(32bit)
    ⓽LRに最終転置(64bit)を適用させる：c(64bit) = IP-1(LR)

<<<ラウンド関数Lとは>>>
    R(n-1)(32bit)とサブ鍵(48bit)を引数に取る関数。
    <<<実際の処理>>>
        ➀R(n-1)をEで拡大転置(48bit)する：R"(n-1)(48bit) = E(R(n-1)(32bit))
        ⓶R"(n-1)(48bit)とサブ鍵(48bit)で排他的論理和をとる。：R""(n-1)(48bit) = R"(n-1)(48bit)　⊕　サブ鍵(48bit)
        ⓷R""(n-1)(48bit)を6bit毎に分割して8個のグループに分ける：6bit ×　8 = 48bit
        ⓸各6bitのグループにa-box変換Sを施して、s(4bit)のグループに変換する：s(32bit) ×　8 = S(6bit ×　8)
        ⓹各sグループ(4bit)をすべて連結させる(32bit)：y(32bit) = s(4bit) × 8
        ⓺y(32bit)をPで転置する：y" = P(y)

<<<s-box変換Sとは>>>
    ・DESで用いるs-box変換は、6bitを入力して4bitを出力する。　※AESでは8bit入力　→　4bit出力

    (例)　101011(6bit)を入力　→　縦軸10、横軸1011に該当する7をバイト列(4bit)で出力　→　0111(4bit)を出力

    S1	0000	0001	0010	0011	0100	0101	0110	0111	1000	1001	1010	1011	1100	1101	1110	1111
    00	14	    4	    13	    1	    2	    15	    11	    8	    3	    10	    6	    12	    5	    9	    0	    7
    01	0	    15	    7	    4	    14  	2   	13    	1   	10	    6	    12	    11  	9	    5	    3	    8
    10	4	    1	    14  	8	    13  	6   	2   	11  	15  	12  	9	    7	    3	    10  	5	    0
    11	15	    12	    8   	2	    4	    9	    1   	7	    5	    11  	3   	14  	10  	0   	6	    13

　　・s1~s8まで存在し、各8つのグループ(6bit)を入力して、4bitに変換していく。

